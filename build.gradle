buildscript {
    ext {
        springDependencyVersion = '1.0.11.RELEASE'
        springBootVersion = '2.5.3'
        kotlinVersion = '1.5.0'
        jooqPluginVersion = '6.0'
        springdocVersion = '1.5.10'
        r2dbcMySQLVersion = '0.8.2.RELEASE'
        r2dbcPoolVersion = '0.8.7.RELEASE'
        r2dbcH2Version = '0.8.4.RELEASE'
        mockKVersion = '1.12.0'
        kotestVersion = '4.4.3'
        kotlinJsonVersion = '1.2.1'
        kotlinDateVersion = '0.2.1'
        testcontainersVersion = '1.16.0'
    }
}

plugins {
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.serialization' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'nu.studer.jooq' version "${jooqPluginVersion}"
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

group = 'com.yshukevich.pharmacy.userservice'
version = '0.0.6'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${kotlinJsonVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:${kotlinDateVersion}"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    implementation "org.springdoc:springdoc-openapi-webflux-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-kotlin:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-common:${springdocVersion}"
    implementation "dev.miku:r2dbc-mysql:${r2dbcMySQLVersion}"
    implementation "io.r2dbc:r2dbc-pool:${r2dbcPoolVersion}"
    testImplementation "io.r2dbc:r2dbc-h2:${r2dbcH2Version}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:${kotlinVersion}"
    testImplementation "io.mockk:mockk:${mockKVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
    jooqGenerator "org.jooq:jooq-meta-extensions"
}

jooq {
    configurations {
        main {
            generationTool {
                generator {
                    name = "org.jooq.codegen.KotlinGenerator"
                    database {
                        name = "org.jooq.meta.extensions.ddl.DDLDatabase"
                        properties {
                            property {
                                key = "scripts"
                                value = "src/main/resources/db/schema.sql"
                            }
                        }
                        inputSchema = "PHARMACY"
                    }
                    generate {
                        pojos = 'true'
                        pojosAsKotlinDataClasses = 'true'
                    }
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        ["passed", "skipped", "failed"]
        showStandardStreams = true
    }
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}

wrapper {
    gradleVersion = '7.1'
    distributionType = Wrapper.DistributionType.ALL
}
